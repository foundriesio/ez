[
  {
    "title": "The OSF Gateway",
    "description": "A demonstration set of containers to create a BLE IoT gateway",
    "type": "container",
    "platform": "linux",
    "categories": [
      "IoT",
      "Gateway",
      "Demonstration"
    ],
    "image": "opensourcefoundries/compose-launcher:latest",
    "restart_policy": "no",
    "env": [
      {
        "name": "TARGET",
        "description": "Docker compose file to run",
        "set": "simple-gateway.yml"
      },
      {
        "name": "ACCOUNT",
        "description": "Docker hub account",
        "set": "opensourcefoundries"
      }
    ],
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  },
  {
    "title": "The OSF All-in-one Demo",
    "description": "IoT device management suite all on your device",
    "type": "container",
    "platform": "linux",
    "categories": [
      "IoT",
      "Gateway",
      "Demonstration"
    ],
    "image": "opensourcefoundries/compose-launcher:latest",
    "restart_policy": "no",
    "env": [
      {
        "name": "TARGET",
        "description": "The set of containers to launch",
        "set": "all-in-one.yml"
      },
      {
        "name": "ACCOUNT",
        "description": "The account on docker hub",
        "set": "opensourcefoundries"
      }
    ],
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  },
  {
    "title": "watchtower",
    "description": "an application that checks for updated versions of your running containers and automatically pulls them down and restarts your containers",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Container", "Management"
    ],
    "image": "opensourcefoundries/watchtower:latest",
    "restart_policy": "unless-stopped",
    "ports": [
      "8080/tcp"
    ],
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  },
  {
    "title": "Dump1090",
    "description": "Dump1090 server",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Demonstration"
    ],
    "image": "opensourcefoundries/dump1090:latest",
    "restart_policy": "unless-stopped",
    "privileged": true,
    "ports": [
      "8080/tcp"
    ],
    "volumes": [
      {
        "container": "/dev/bus/usb",
        "bind": "/dev/bus/usb"
      }
    ]
  },
  {
    "title": "leshan",
    "description": "Eclipse Foundation's Leshan Server for LWM2M",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Device Management"
    ],
    "image": "opensourcefoundries/leshan:latest",
    "restart_policy": "unless-stopped",
    "network": "bridge",
    "ports": [
      "8081/tcp",
      "5683/udp",
      "5684/udp"
    ],
    "env": [
      {
        "name": "LESHAN_ARGS",
        "set": "-wp 8081"
      }
    ]
  },
  {
    "title": "hawkbit",
    "description": "Eclipse Foundation's Hawkbit OTA Server",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Device Management"
    ],
    "image": "opensourcefoundries/hawkbit-update-server:latest",
    "restart_policy": "unless-stopped",
    "network": "bridge",
    "ports": [
      "8080/tcp"
    ]
  },
  {
    "title": "Azure IoT Edge node",
    "description": "a simple Microsoft Azure IoT Edge demo deployment",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Device Management",
      "Microsoft"
    ],
    "image": "opensourcefoundries/simple-iot-edge:latest",
    "restart_policy": "unless-stopped",
    "network": "bridge",
    "env": [
      {
        "name": "CONNECTIONSTRING",
        "label": "The connection string from Azure IoT Edge Dashboard",
        "set": ""
      }
    ],
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  },
  {
    "title": "OK Google - Voice Assistant",
    "description": "The OK Google Voice assistant (requires configuration)",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Demonstration",
      "Audio",
      "Google"
    ],
    "image": "opensourcefoundries/ok-google:latest",
    "restart_policy": "unless-stopped",
    "privileged": true,
    "interactive": true,
    "env": [
      {
          "name": "MIC_ADDR",
          "label": "The pcm address for the microphone",
          "set": ""
      },
      {
          "name": "SPEAKER_ADDR",
          "label": "The pcm address for the speaker",
          "set": ""
      },
      {
          "name": "PROJECT_ID",
          "label": "ID of project when created in Google Cloud Platform",
          "set": ""
      },
      {
          "name": "MODEL_ID",
          "label": "Model ID for device when created in Google Cloud Platform",
          "set": ""
      },
      {
          "name": "CLIENT_SECRET",
          "label": "Client secret from Google Cloud Platform",
          "set": ""
      },
      {
          "name": "CLIENT_ID",
          "label": "Client ID from Google Cloud Platform",
          "set": ""
      },
      {
          "name": "REFRESH_TOKEN",
          "label": "Refresh token when device was authenticated",
          "set": ""
      }
    ]
  },
  {
    "title": "Xorg Demo",
    "description": "Xorg server (Simply FB TFT display and ADS7846 touchscreen)",
    "type": "container",
    "platform": "linux",
    "categories": [
      "Demonstration",
      "Graphics"
    ],
    "image": "opensourcefoundries/simple-fbtft:latest",
    "restart_policy": "unless-stopped",
    "privileged": true,
    "volumes": [
      {
        "container": "/var/run/dbus/system_bus_socket",
        "bind": "/var/run/dbus/system_bus_socket"
      }
    ]
  },
  {
    "title": "EdgeX pre-release",
    "description": "EdgeX - x86 only - ALPHA quality, Work in progress upstream",
    "type": "container",
    "platform": "linux",
    "categories": [
      "IoT",
      "Gateway",
      "Demonstration"
    ],
    "image": "opensourcefoundries/compose-launcher:latest",
    "restart_policy": "no",
    "command": "/bin/bash -c /edgex-docker-launch.sh",
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  }
]
